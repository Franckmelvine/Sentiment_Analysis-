import streamlit as st
from transformers import pipeline

# Titre de l'application
st.title("Analyse de Sentiments avec BERT")

# Charger le mod√®le une seule fois au d√©marrage de l'application
@st.cache_resource
def load_model():
    model_name = "arindamatcalgm/w266_model4_BERT_AutoModelForSequenceClassification"
    return pipeline("text-classification", model=model_name)

# D√©finir un mapping des labels pour des r√©sultats compr√©hensibles
label_mapping = {
    "LABEL_0": "N√©gatif",
    "LABEL_1": "Positif",
}

# Ajouter des √©motic√¥nes pour rendre l'interface plus conviviale
sentiment_emojis = {
    "Positif": "üòä",
    "N√©gatif": "üò†",
    "Inconnu": "‚ùì",
}

# Fonction pour pr√©dire le sentiment
def predict_sentiment(pipe, text):
    result = pipe(text)[0]  # R√©cup√©rer le premier r√©sultat
    label = result['label']
    score = result['score']
    # Remplacer le label par une description compr√©hensible
    sentiment = label_mapping.get(label, "Inconnu")
    return sentiment, score

# Charger le mod√®le
pipe = load_model()

# Zone de texte pour l'entr√©e utilisateur
user_input = st.text_area("Entrez votre texte ici pour analyser le sentiment :", "")

# Bouton pour lancer l'analyse
if st.button("Analyser"):
    if user_input:
        # Faire la pr√©diction
        sentiment, confidence = predict_sentiment(pipe, user_input)

        # Afficher les r√©sultats avec des √©motic√¥nes
        st.write(f"**Sentiment :** {sentiment} {sentiment_emojis.get(sentiment, '')}")
        st.write(f"**Confiance :** {confidence:.4f}")

        # Afficher un message d'avertissement si le sentiment est inconnu
        if sentiment == "Inconnu":
            st.warning(f"Le label renvoy√© par le mod√®le n'est pas reconnu. Veuillez v√©rifier le mod√®le.")
    else:
        st.warning("Veuillez entrer un texte pour l'analyse.")